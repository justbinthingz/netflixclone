[{"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\index.js":"1","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\App.js":"2","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\reportWebVitals.js":"3","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\Row.js":"4","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\requests.js":"5","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\axios.js":"6","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\Banner.js":"7","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\Navbar.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":819,"mtime":1608271043763,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2864,"mtime":1608278393280,"results":"13","hashOfConfig":"10"},{"size":786,"mtime":1608261002201,"results":"14","hashOfConfig":"10"},{"size":201,"mtime":1608261218534,"results":"15","hashOfConfig":"10"},{"size":1975,"mtime":1608270573906,"results":"16","hashOfConfig":"10"},{"size":930,"mtime":1608280875512,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"qfimab",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\index.js",[],["36","37"],"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\App.js",[],"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\reportWebVitals.js",[],"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\Row.js",["38"],"import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Row.css'\r\nimport Youtube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([])\r\n    const baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n    const [trailerUrl, setTrailer] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // make request to tmdb to pull movies-rows\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl); //wait fo rthis reuqest then proceed\r\n            console.log(\"req\", request.data.results);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1, //autoplays when it loadsin\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailer('');\r\n        }\r\n        else {\r\n            console.log(\"name\", movie)\r\n            console.log(\"name\", movie?.name)\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name || \"\")\r\n                .then(url => {\r\n\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    // https://www.youtube.com/watch?v=fdghyerye   \r\n\r\n                    console.log(\"url\", new URL(url).search)\r\n                    console.log(\"url\", urlParams)\r\n                    console.log(\"url\", urlParams.get('v'))\r\n\r\n                    setTrailer(urlParams.get('v'));\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {/* titles */}\r\n            <h2>{title}</h2>\r\n\r\n            {/* container -> posters scrollable */}\r\n            <div className=\"row_posters\">\r\n                {/* several row posters */}\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} src={`${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {/* for u-tube embed */}\r\n            {trailerUrl &&\r\n                (\r\n                    <div className=\"trailer_container\">\r\n                        <button className=\"close_trailer\" onClick={() => handleClick()} >Close Trailer</button>\r\n                        <Youtube videoId={trailerUrl} opts={opts} />\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row\r\n","C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\requests.js",[],"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\axios.js",[],"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\Banner.js",[],"C:\\Users\\BindushreeN\\Desktop\\portfolio\\projects\\netflix-clone\\netflix-clone\\src\\Navbar.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":16},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'requests' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]